/*

老猴子辛苦了一辈子，给那群小猴子们留下了一笔巨大的财富——一大堆桃子。老猴子决定把这些桃子分给小猴子。

第一个猴子来了，它把桃子分成五堆，五堆一样多，但还多出一个。它把剩下的一个留给老猴子，自己拿走其中的一堆。

第二个猴子来了，它把桃子分成五堆，五堆一样多，但又多出一个。它把多出的一个留给老猴子，自己拿走其中的一堆。

后来的小猴子都如此照办。最后剩下的桃子全部留给老猴子。

这里有n只小猴子，请你写个程序计算一下在开始时至少有多少个桃子，以及最后老猴子最少能得到几个桃子。


输入描述:
	输入包括多组测试数据。
	每组测试数据包括一个整数n(1≤n≤20)。
	输入以0结束，该行不做处理。


输出描述:
	每组测试数据对应一行输出。
	包括两个整数a，b。
	分别代表开始时最小需要的桃子数，和结束后老猴子最少能得到的桃子数。


*/


//  先借给猴子四个桃
//  如此每次可以分到整数个

//设最小需要 x 个桃
//  第一只猴得到(x + 4) * (1 / 5) 个
//  剩余(x + 4) * (4 / 5) 个
//  n 次之后剩余(x + 4) * (4 / 5)^n
//  要满足最后剩余的为整数，并且 x 最小， x + 4 = 5^n时，x = 5^n - 4;
//  老猴子得到的数量为：(x + 4) * (4 / 5)^n + n - 4 = 4^n + n - 4 (+n 由于每只猴子给 1 个)
import java.util.*;
public class Main {
   public static void main(String[] args){
       Scanner sc = new Scanner(System.in);
       while (sc.hasNext()){
           long n = sc.nextInt();
           if (n == 0){
               return;
           }
           long num = (long)Math.pow(5,n) - 4;
           long get = (long)Math.pow(4,n) + n - 4;
           String ans = String.format("%d %d", num, get);
           System.out.println(ans);
       }
   }
}